{"version":3,"sources":["Components/Cards/Cards.module.css","Api/index.js","Components/Cards/Cards.jsx","Components/Charts/Charts.jsx","Components/CountrySelector/CountrySelector.jsx","App.js","serviceWorker.js","index.js","Components/Charts/Charts.module.css","Components/CountrySelector/CountrySelector.module.css","App.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountrySelector","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","style","textAlign","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8eefb3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\n\n        const modifiedData = {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate\n        }\n\n        return modifiedData;\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n\n    } catch(error) {\n        return error;\n    }\n}\n\n// 'const modifiedData = data.map((dailyData) => ({})' makes an instant return of an object","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n// functional component\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if(!confirmed) {\n        return 'Loading...' ;\n    }\n\n    return(\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp\n                                start = {0}\n                                end = {confirmed.value}\n                                duration = {2.5}\n                                separator = \",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\" component=\"p\">Number of infected individuals by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp\n                                start = {0}\n                                end = {recovered.value}\n                                duration = {2.5}\n                                separator = \",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\" component=\"p\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <CountUp\n                                start = {0}\n                                end = {deaths.value}\n                                duration = {2.5}\n                                separator = \",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\" component=\"p\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import React, { useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../Api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Charts.module.css'\n// functional component\n\nconst Charts = ({data: { confirmed, recovered, deaths }, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n                setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length // 71 (if the value is zero then False by default)\n        ? (\n            <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: 'rgb(0, 255, 255)',\n                    fill: true\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.2)',\n                    fill: true\n                }],\n            }}\n        />) : null \n    );\n\n    const barChart = (\n        confirmed // equivalent to only: data.confirmed\n        ? (\n            <Bar\n                data = {{\n                    labels: ['infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgb(229, 245, 7, 0.7)', \n                            'rgba(0, 255, 255, 0.5)', \n                            'rgba(255, 0, 0, 0.2)'\n                        ], data: [confirmed.value, recovered.value, deaths.value]\n                        // equivalent to ... data: [data.confirmed, data.recovered, data.deaths]\n                    }]\n                }}\n                options={{\n                    legend: { display: false },\n                    title: { display: true, text:`Current state in ${country}`}\n                }}\n            />\n        ) : null\n    );\n\n    return(\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Charts;\n\n// useState, useEffect are hooks, note that 'const [dailyData, setDailyData] = useState({});' is the \n// ... way to declare a state in f(x) component... in class-based component its state = {dailyData: {}}\n// issues when hooks deal with async f(x), so separate f(x) are required","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { fetchCountries } from '../../Api';\n\nimport styles from './CountrySelector.module.css';\n// functional component\n\nconst CountrySelector = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n\n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountrySelector;\n\n// useEffect has a infinite loop effect if useEffect(() => {..fetchCountries();}, []);\n// ... only when setFetchedCountries change then useEffect will change and stop looping","import React, { Component } from 'react';\n\nimport { fetchData } from './Api';\nimport { Cards, Charts, CountrySelector } from './Components';\nimport styles from'./App.module.css';\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData });\n    //console.log(data);\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    \n    this.setState({ data: fetchedData, country: country });\n    // Fetch the data\n    // Set the State\n  }\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <h1 style={{textAlign: 'center', fontSize: '50px', color: 'rgb(88,88,88)'}}>COVID-19<br></br>TRACKER APP</h1>\n        <Cards data={data}/>\n        <CountrySelector handleCountryChange={this.handleCountryChange}/>\n        <Charts data={data} country={country}/>\n      </div>\n    );\n  } \n}\n\nexport default App;\n\n// run the following command lines on terminal:\n//    npm install --save axios react-chartjs-2 react-countup classnames\n//    npm install --save @material-ui/core\n//    npm install --save chart.js\n\n// run the following command lines on terminal and paste numbers on package.json:\n//    npm -v\n//    node -v\n\n// paste the following string (replace x's with numbers) on package.json prior to 'dependencies'\n/*\"engines\": {\n  \"node\": \"xx.xx.x\",\n  \"npm\": \"x.xx.x\"\n},*/\n\n// Get rid of Yarn.lock file ONLY, you can't have both the package.json (use this) and the yarn\n\n\n\n// check https://material-ui.com\n// .module.css is to avoid interference and styles from components will get applied all over place\n// you can work with class, or functional components with hooks\n// on 'import { fetchData } from './Api';' you don't need to specify index since automatic\n// await is needed for asynchroneous f(x)\n// componentDidMount() is the best way to fetch data, but wait needs to wrap an asyn f(x), for lifecycly hook\n// ... put it infront: async componentDidMount(), for the rest (other func.) put left to the parenthesis\n// when render 'const { data } = this.state;' & return '<Cards data={data}/>', then on Cards' file can pass props\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__rnzyX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountrySelector_formControl__2jgHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}